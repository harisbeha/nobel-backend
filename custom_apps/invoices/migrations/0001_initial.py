# -*- coding: utf-8 -*-
# Generated by Django 1.11.12 on 2018-05-04 09:25
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_info_storage', jsonfield.fields.JSONField(blank=True, null=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('address', models.TextField(max_length=500, verbose_name='Full building address')),
                ('type', models.IntegerField(choices=[(1, 'STANDALONE'), (2, 'MIXED_USE')], verbose_name='Type of property')),
                ('deice_rate', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Cost per de-icing w/o tax')),
                ('deice_tax', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Tax per de-icing')),
                ('plow_rate', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Cost per plow w/o tax')),
                ('plow_tax', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Tax per plow')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DiscrepancyReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('author', models.CharField(max_length=100, verbose_name='author')),
                ('message', models.TextField(verbose_name='Discrepancy communication')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_info_storage', jsonfield.fields.JSONField(blank=True, null=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('remission_address', models.TextField(blank=True, max_length=500, null=True, verbose_name='remission address')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegionalAdmin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(max_length=100, verbose_name="Regional manager's company name")),
                ('system_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SafetyReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('safe_to_open', models.BooleanField(verbose_name='Safe to open site?')),
                ('safety_concerns', models.TextField(blank=True, max_length=1000, verbose_name='Any concerns? Let us know of all site conditions')),
                ('snow_instructions', models.TextField(blank=True, max_length=1000, verbose_name='Extra instructions for handling remaining snow')),
                ('haul_stack_status', models.IntegerField(choices=[(0, 'NONE'), (1, 'NEEDS_STACKING'), (2, 'NEEDS_HAULING')], verbose_name='Snow hauling or stacking required?')),
                ('haul_stack_estimate', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Cost estimate for future snow hauling or stacking')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_info_storage', jsonfield.fields.JSONField(blank=True, null=True)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(max_length=100, verbose_name="Vendor's company name")),
                ('address', models.TextField(max_length=500, verbose_name='Full mailing address')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.RegionalAdmin')),
                ('system_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VendorSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('const_a', models.IntegerField()),
                ('const_b', models.IntegerField()),
                ('vendor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='invoices.Vendor')),
            ],
            options={
                'verbose_name_plural': 'Vendor settings',
            },
        ),
        migrations.CreateModel(
            name='WorkOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('storm_name', models.CharField(help_text='Name of the event for which work is being done in response', max_length=100)),
                ('storm_date', models.DateField(help_text='Date of the last storm event')),
                ('last_service_date', models.DateField(help_text='Date of last service at this location')),
                ('flag_safe', models.BooleanField(default=False, help_text='Property safe to open?')),
                ('flag_visitsdocumented', models.BooleanField(default=False, help_text='all information about work visits entered?')),
                ('flag_weatherready', models.BooleanField(default=False, help_text='Spending forecast generated for work order?')),
                ('flag_failure', models.NullBooleanField(default=None, help_text='Service failure marked by client?')),
                ('flag_hasdiscrepancies', models.NullBooleanField(default=None, help_text='Discrepancies in forecasted/actual spending for the work order?')),
                ('flag_hasdiscrepanciesfailure', models.BooleanField(default=False, help_text='Vendor failed to provide a satisfactory response to the discrepancies?')),
                ('flag_completed', models.BooleanField(default=False, help_text='Sent to the vendor on a finalized invoice?')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.Building')),
                ('invoice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='invoices.Invoice')),
                ('vendor', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='invoices.Vendor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorkVisit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('response_time_start', models.DateTimeField(verbose_name='Time clocked in')),
                ('response_time_end', models.DateTimeField(verbose_name='Time clocked out')),
                ('provided_deicing', models.BooleanField(verbose_name='De-icing services provided?')),
                ('provided_plowing', models.BooleanField(verbose_name='Plowing services provided? (includes plowing and shoveling ONLY)')),
                ('work_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.WorkOrder')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='safetyreport',
            name='work_order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.WorkOrder'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.Vendor'),
        ),
        migrations.AddField(
            model_name='discrepancyreport',
            name='work_order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='invoices.WorkOrder'),
        ),
        migrations.CreateModel(
            name='InvoiceForecastReportProxyNWA',
            fields=[
            ],
            options={
                'verbose_name': 'forecast report work order',
                'abstract': False,
                'proxy': True,
                'indexes': [],
            },
            bases=('invoices.workorder',),
        ),
        migrations.CreateModel(
            name='RegionalAdminProxyNWA',
            fields=[
            ],
            options={
                'verbose_name': 'internal regional admin',
                'abstract': False,
                'proxy': True,
                'indexes': [],
            },
            bases=('invoices.regionaladmin',),
        ),
        migrations.CreateModel(
            name='VendorProxyCBRE',
            fields=[
            ],
            options={
                'verbose_name': 'client vendor',
                'abstract': False,
                'proxy': True,
                'indexes': [],
            },
            bases=('invoices.vendor',),
        ),
        migrations.CreateModel(
            name='WorkOrderProxyCBRE',
            fields=[
            ],
            options={
                'verbose_name': 'reviewable work orders',
                'abstract': False,
                'proxy': True,
                'indexes': [],
            },
            bases=('invoices.workorder',),
        ),
        migrations.CreateModel(
            name='WorkOrderProxyNWA',
            fields=[
            ],
            options={
                'verbose_name': 'discrepancy reviewable work order',
                'abstract': False,
                'proxy': True,
                'indexes': [],
            },
            bases=('invoices.workorder',),
        ),
        migrations.CreateModel(
            name='WorkOrderProxyVendor',
            fields=[
            ],
            options={
                'verbose_name': 'vendor work order',
                'abstract': False,
                'proxy': True,
                'indexes': [],
            },
            bases=('invoices.workorder',),
        ),
    ]
